# -*- coding: utf-8 -*-
"""MA&expoenetial_smoothing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K4uwSL4SiT5LdGKgkI3j1IwHroZCTsni
"""

!pip install finance-datareader

import numpy as np
import pandas as pd
import FinanceDataReader as fdr
pd.set_option('display.max_rows', 560)

etf = fdr.StockListing("ETF/KR") # laod etf list

df = fdr.DataReader('360750', '2020-08-01') # tiger 미국 S&P 500 
df

m_price = df['Close'] # 종가 데이터
df1 = m_price.to_frame() # series 데이터를 dataframe으로 변환
df1 = df1.reset_index() # index를 column으로 변환
t = list(range(1, len(df1) + 1)) # time 변수 추가
df1['t'] = pd.DataFrame(t, columns = ['t'])
df1

from statsmodels.formula.api import ols

stock = ols('Close ~ t', data=df1).fit() # ols : Create a Model from a formula and dataframe.
print(stock.summary())

x = df1['t']
ypred = stock.predict(x)
yactual = df1['Close']
df1['yym'] = df1['Date'].dt.to_period('D')
df1['ypred'] = ypred

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt


fig, ax = plt.subplots(nrows=1, figsize=(8,4), sharex=True)
# sharex = Controls sharing of properties among x (*sharex*) or y (*sharey*
# 모든 서브플롯이 같은 x축 눈금을 사용하도록.

df1.plot(x = 'yym', y='Close', ax =ax)
df1.plot(x = 'yym', y='ypred', ax =ax)
ax.set(xlabel='time', ylabel='index')
ax.grid('on', which='minor', axis = 'x')
ax.grid('off', which='major', axis = 'x')
plt.show()

"""# 이동평균으로 주가 예측"""

from statsmodels.compat import lzip
import statsmodels.api as sm
from statsmodels.formula.api import ols

df = fdr.DataReader('000660', '2010-10-01') # sk 하이닉스 주가 
df = df[['Close']]
df1 = df.copy()

def ma(dframe, n):
    dframe['MA{}'.format(n)] = dframe.loc[:, ('Close')].rolling(window=n).mean().shift(1)

ma(df1, 5) # 5 moving average
ma(df1, 60) # 60 moving average
ma(df1, 120) # 120 moving average

df1 = df1.reset_index()
df1 = df1.dropna()

fig, ax= plt.subplots(nrows=1, figsize=(12, 6), sharex=True)
df1.plot(x='Date', y='Close', ax = ax)
df1.plot(x='Date', y='MA5', ax = ax)
df1.plot(x='Date', y='MA60', ax = ax)
df1.plot(x='Date', y='MA120', ax = ax)
ax.set(xlabel='time', ylabel='price')
ax.grid(True)
plt.show()

"""# 단일지수평활법으로 주가 예측"""

df1a = df1.reset_index()
df1a['es'] = None # 단순지수평활법으로 구한 자료 위치

# 초기값, index 0~9 까지 평균
df1a.loc[df1a.index[9], 'es'] = df1a.loc[df1a.index[0:10], 'Close'].mean()

alpha = .4

for i in range(10, df1a.shape[0]):
    df1a.loc[df1a.index[i], 'es'] = alpha * df1a.loc[df1a.index[i], 'Close'] + (1-alpha) * df1a.loc[df1a.index[i-1], 'es']

df1a['forecast'] = df1a['es'].shift(1)
df1a

fig, ax= plt.subplots(nrows=1, figsize=(12, 6), sharex=True)
df1a.plot(x='Date', y='Close', ax = ax)
df1a.plot(x='Date', y='forecast', ax = ax)
ax.set(xlabel='time', ylabel='price')
ax.grid(True)
plt.show()

fig, ax= plt.subplots(nrows=1, figsize=(12, 6), sharex=True)
df1a[-100:].plot(x='Date', y='Close', ax = ax)
df1a[-100:].plot(x='Date', y='forecast', ax = ax)
ax.set(xlabel='time', ylabel='price')
ax.grid(True)
plt.show()